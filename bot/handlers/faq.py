from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.filters import Command
from database import get_session
from services.faq_service import get_all_faqs, get_faq_by_id, search_faqs
from utils.logger import logger
from keyboards.faq import get_faq_keyboard, get_faq_detail_keyboard, get_faq_search_results_keyboard
import hashlib
import re

faq_router = Router()


@faq_router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /help")
    
    async for session in get_session():
        faqs = await get_all_faqs(session)
    
    if not faqs:
        await message.answer(
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.",
            reply_markup=get_faq_keyboard([])
        )
        return
    
    await message.answer(
        "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º.",
        reply_markup=get_faq_keyboard(faqs)
    )


@faq_router.callback_query(F.data == "help")
async def show_faq_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ FAQ"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª FAQ")
    
    async for session in get_session():
        faqs = await get_all_faqs(session)
    
        if not faqs:
            await callback.message.edit_text(
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.",
                reply_markup=get_faq_keyboard([])
            )
            return

        await callback.message.edit_text(
            "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
            reply_markup=get_faq_keyboard(faqs)
        )


@faq_router.callback_query(F.data == "faq_list")
async def callback_faq_list(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É FAQ"""
    await show_faq_list(callback)


@faq_router.callback_query(F.data.startswith("faq:"))
async def show_faq_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ FAQ"""
    user_id = callback.from_user.id
    faq_id = int(callback.data.split(":")[1])
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª FAQ —Å ID {faq_id}")
    
    async for session in get_session():
        faq = await get_faq_by_id(session, faq_id)
    
    if not faq:
        await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await show_faq_list(callback)
        return
    
    await callback.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å: {faq.question}\n\n"
        f"–û—Ç–≤–µ—Ç: {faq.answer}",
        reply_markup=get_faq_detail_keyboard(faq_id)
    )


@faq_router.callback_query(F.data == "faq_search")
async def faq_search_prompt(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ FAQ"""
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤.",
        reply_markup=get_faq_detail_keyboard(0)  # 0 - dummy id
    )


async def search_by_keywords(session, search_query):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    words = re.findall(r'\b\w{3,}\b', search_query.lower())
    if not words:
        return []
        
    # –ò—â–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –æ—Ç–¥–µ–ª—å–Ω–æ
    all_results = []
    for word in words:
        if len(word) >= 3:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
            results = await search_faqs(session, word)
            all_results.extend(results)
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_faqs = []
    seen_ids = set()
    for faq in all_results:
        if faq.id not in seen_ids:
            unique_faqs.append(faq)
            seen_ids.add(faq.id)
    
    return unique_faqs


@faq_router.message(lambda message: message.text and not message.text.startswith('/'))
async def process_faq_search(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ FAQ"""
    user_id = message.from_user.id
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML-—Ç–µ–≥–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    search_query = re.sub(r'<[^>]+>', '', message.text.strip())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–ª–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if "–í–æ–ø—Ä–æ—Å:" in search_query and "–û—Ç–≤–µ—Ç:" in search_query:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
        question_match = re.search(r'–í–æ–ø—Ä–æ—Å:(.*?)(?:–û—Ç–≤–µ—Ç:|$)', search_query, re.DOTALL)
        if question_match:
            search_query = question_match.group(1).strip()
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
    if len(search_query) > 100:
        search_query = search_query[:100]
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ FAQ: {search_query}")
    
    async for session in get_session():
        faqs = await search_faqs(session, search_query)
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if not faqs:
            faqs = await search_by_keywords(session, search_query)
    
    if not faqs:
        await message.answer(
            f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É \"{search_query}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_faq_search_results_keyboard([])
        )
        return
    
    await message.answer(
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{search_query}\":\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(faqs)}",
        reply_markup=get_faq_search_results_keyboard(faqs)
    )


@faq_router.inline_query()
async def inline_faq_search(query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ FAQ"""
    search_query = query.query.strip()
    
    if not search_query:
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        async for session in get_session():
            faqs = await get_all_faqs(session)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            faqs = faqs[:5] if faqs else []
    else:
        # –ò—â–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É
        async for session in get_session():
            faqs = await search_faqs(session, search_query)
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            if not faqs and len(search_query) > 3:
                faqs = await search_by_keywords(session, search_query)
                faqs = faqs[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è inline —Ä–µ–∂–∏–º–∞
    results = []
    
    for faq in faqs:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –≤–æ–ø—Ä–æ—Å–∞
        result_id = hashlib.md5(f"faq_{faq.id}".encode()).hexdigest()

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        results.append(
            InlineQueryResultArticle(
                id=result_id,
                title=faq.question,
                description=faq.answer[:100] + "..." if len(faq.answer) > 100 else faq.answer,
                input_message_content=InputTextMessageContent(
                    message_text=f"‚ùì –í–æ–ø—Ä–æ—Å: {faq.question}",
                    parse_mode=None
                )
            )
        )
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
    if not results and search_query:
        result_id = hashlib.md5(f"not_found_{search_query}".encode()).hexdigest()
        results.append(
            InlineQueryResultArticle(
                id=result_id,
                title="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                description=f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                input_message_content=InputTextMessageContent(
                    message_text=f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ FAQ.",
                    parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ HTML/Markdown
                )
            )
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await query.answer(results=results, cache_time=300)

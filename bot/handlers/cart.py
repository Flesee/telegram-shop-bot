from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select

from database import get_session
from services.cart_service import get_cart_items, update_cart_item, remove_from_cart, clear_cart
from utils.logger import logger
from utils.formatters import format_price, format_total_price
from keyboards import (
    get_cart_keyboard, get_cart_item_keyboard,
    get_cart_empty_keyboard
)
from .start import callback_start
from models.user import User


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class OrderDelivery(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_phone = State()
    waiting_for_address = State()
    confirm_info = State()


cart_router = Router()


@cart_router.callback_query(F.data == "cart")
async def show_cart(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –∫–æ—Ä–∑–∏–Ω—É")
    
    async for session in get_session():
        cart_items = await get_cart_items(session, user_id)
        
        if not cart_items:
            await callback.message.edit_text(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
                reply_markup=get_cart_empty_keyboard()
            )
            await callback.answer()
            return
        
        total_price = 0
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        
        for i, (cart_item, product) in enumerate(cart_items, 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
            price_str = format_price(product.price)
            
            item_total = product.price * cart_item.quantity
            total_price += item_total
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
            item_total_str = format_price(item_total)
            
            cart_text += (
                f"{i}. {product.name}\n"
                f"   –¶–µ–Ω–∞: {price_str} √ó {cart_item.quantity} —à—Ç. = {item_total_str}\n\n"
            )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
        total_price_str = format_price(total_price)
        
        cart_text += f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price_str}"

        await callback.message.edit_text(
            cart_text,
            reply_markup=get_cart_keyboard(cart_items, total_price)
        )
    
    await callback.answer()


@cart_router.callback_query(F.data.startswith("cart_item_"))
async def show_cart_item(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    cart_item_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª —Ç–æ–≤–∞—Ä {cart_item_id} –≤ –∫–æ—Ä–∑–∏–Ω–µ")
    
    async for session in get_session():
        cart_items = await get_cart_items(session, user_id)
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä
        cart_item_data = next(
            ((cart_item, product) for cart_item, product in cart_items if cart_item.id == cart_item_id),
            None
        )
        
        if not cart_item_data:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)
            return
        
        cart_item, product = cart_item_data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        price_str, total_str = format_total_price(product.price, cart_item.quantity)

        text = (
            f"üõçÔ∏è {product.name}\n\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {price_str}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cart_item.quantity} —à—Ç.\n"
            f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_str}"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_cart_item_keyboard(cart_item)
        )
    
    await callback.answer()


@cart_router.callback_query(F.data.startswith("cart_increase_"))
async def increase_quantity(callback: CallbackQuery):
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    cart_item_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {cart_item_id} –≤ –∫–æ—Ä–∑–∏–Ω–µ")
    
    async for session in get_session():
        cart_items = await get_cart_items(session, user_id)
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä
        cart_item_data = next(
            ((cart_item, product) for cart_item, product in cart_items if cart_item.id == cart_item_id),
            None
        )
        
        if not cart_item_data:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)
            return
        
        cart_item, product = cart_item_data
        
        new_quantity = cart_item.quantity + 1
        await update_cart_item(session, cart_item.id, new_quantity)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        price_str, total_str = format_total_price(product.price, new_quantity)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"üõçÔ∏è {product.name}\n\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {price_str}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_quantity} —à—Ç.\n"
            f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_str}"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_cart_item_keyboard(cart_item, new_quantity)
        )
    
    await callback.answer()


@cart_router.callback_query(F.data.startswith("cart_decrease_"))
async def decrease_quantity(callback: CallbackQuery):
    """–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    cart_item_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {cart_item_id} –≤ –∫–æ—Ä–∑–∏–Ω–µ")
    
    async for session in get_session():
        cart_items = await get_cart_items(session, user_id)
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä
        cart_item_data = next(
            ((cart_item, product) for cart_item, product in cart_items if cart_item.id == cart_item_id),
            None
        )
        
        if not cart_item_data:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)
            return
        
        cart_item, product = cart_item_data
        
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω–æ 1, —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        if cart_item.quantity == 1:
            await remove_from_cart(session, cart_item.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_items = await get_cart_items(session, user_id)
            
            if cart_items:
                # –ï—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–≤–∞—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ
                await show_cart(callback)
            else:
                await callback.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
                await callback_start(callback)
            return
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        new_quantity = cart_item.quantity - 1
        await update_cart_item(session, cart_item.id, new_quantity)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        price_str, total_str = format_total_price(product.price, new_quantity)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"üõçÔ∏è {product.name}\n\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {price_str}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_quantity} —à—Ç.\n"
            f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_str}"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_cart_item_keyboard(cart_item, new_quantity)
        )
    
    await callback.answer()


@cart_router.callback_query(F.data.startswith("cart_remove_"))
async def remove_item(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart_item_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä {cart_item_id} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    
    async for session in get_session():
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
        await remove_from_cart(session, cart_item_id)
        await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_items = await get_cart_items(session, user_id)
        
        if cart_items:
            # –ï—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–≤–∞—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ
            await show_cart(callback)
        else:
            # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await callback.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
            await callback_start(callback)


@cart_router.callback_query(F.data == "cart_clear")
async def clear_user_cart(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    user_id = callback.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É")
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
        user_result = await session.execute(
            select(User).where(User.user_id == user_id)
        )
        user = user_result.scalars().first()
        
        if user:
            await clear_cart(session, user.id)
            await callback.answer("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", show_alert=True)
        else:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            
        await callback_start(callback)

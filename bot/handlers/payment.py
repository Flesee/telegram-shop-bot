import asyncio
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery

from database import get_session
from services.payment_service import init_payment, check_payment_status, update_order_payment_status, delete_unpaid_order
from services.cart_service import clear_cart, get_cart_items
from services.user_service import get_user_delivery_info
from utils.logger import logger
from keyboards.payment import get_order_payment_keyboard, get_successful_payment_keyboard, get_back_to_cart_keyboard
from handlers.cart import show_cart
from utils.formatters import format_price


payment_router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
payment_tasks = {}


@payment_router.callback_query(F.data == "checkout_payment")
async def process_payment(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    """
    user_id = callback.from_user.id

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã")
    
    async for session in get_session():
        user_info = await get_user_delivery_info(session, user_id)

        if not user_info.get('address') or not user_info.get('phone'):
            await callback.answer("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω", show_alert=True)
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
        payment_data = await init_payment(session, user_id, user_info)
    
        if not payment_data or not payment_data.get('payment_url'):
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return

        cart_items = await get_cart_items(session, user_id)
        total_amount = sum(item[0].quantity * item[1].price for item in cart_items)
        formatted_amount = format_price(total_amount)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
        await callback.message.edit_text(
            f"üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞\n\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {formatted_amount}\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            reply_markup=get_order_payment_keyboard(payment_data.get('payment_url'), payment_data.get('payment_id'))
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        payment_id = payment_data.get('payment_id')
        order_id = payment_data.get('order_id')
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if user_id in payment_tasks and not payment_tasks[user_id].done():
            payment_tasks[user_id].cancel()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        bot = callback.bot
        task = asyncio.create_task(
            check_payment_status_task(user_id, payment_id, order_id, bot, callback.message.chat.id, callback.message.message_id)
        )
        payment_tasks[user_id] = task


@payment_router.callback_query(F.data.startswith("cancel_payment"))
async def cancel_payment(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
    """
    user_id = callback.from_user.id
    payment_id = callback.data.split('_')[-1]

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –ø–ª–∞—Ç–µ–∂ {payment_id}")
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user_id in payment_tasks and not payment_tasks[user_id].done():
        payment_tasks[user_id].cancel()
        del payment_tasks[user_id]

    async for session in get_session():
        await delete_unpaid_order(session, payment_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    await callback.answer('–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.', show_alert=True)
    await show_cart(callback)


async def check_payment_status_task(user_id: int, payment_id: str, order_id: int, bot: Bot, chat_id: int, message_id: int):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
        order_id: ID –∑–∞–∫–∞–∑–∞
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
        for _ in range(60):
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            payment_status = await check_payment_status(payment_id)
            
            if not payment_status:
                await asyncio.sleep(15)
                continue

            if payment_status['status'] == "succeeded":
                async for session in get_session():
                    await update_order_payment_status(session, payment_id, payment_status['status'])

                    await clear_cart(session, user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
                        f"–°—É–º–º–∞: {payment_status['amount']} —Ä—É–±.\n\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    reply_markup=get_successful_payment_keyboard()
                )
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                if user_id in payment_tasks:
                    del payment_tasks[user_id]
                
                break
            elif payment_status['status'] in ["canceled", "pending"]:
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å
                await asyncio.sleep(15)
                continue
            else:
                async for session in get_session():
                    await update_order_payment_status(session, payment_id, payment_status['status'])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
                        f"–°—Ç–∞—Ç—É—Å: {payment_status['status']}\n\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –æ–ø–ª–∞—Ç—ã.",
                    reply_markup=get_back_to_cart_keyboard()
                )
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                if user_id in payment_tasks:
                    del payment_tasks[user_id]
                
                break
            
        # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (15 –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ)
        else:
            payment_status = await check_payment_status(payment_id)
            
            if payment_status and payment_status['status'] == "succeeded":
                async for session in get_session():
                    await update_order_payment_status(session, payment_id, payment_status['status'])
                    await clear_cart(session, user_id)
                
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
                        f"–°—É–º–º–∞: {payment_status['amount']} —Ä—É–±.\n\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    reply_markup=get_successful_payment_keyboard()
                )
            else:
                # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ —É—Å–ø–µ—à–µ–Ω –ø–æ—Å–ª–µ 15 –º–∏–Ω—É—Ç
                async for session in get_session():
                    await delete_unpaid_order(session, payment_id)
                
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=f"‚è± –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ.\n\n"
                        f"–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
                    reply_markup=None
                )
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            if user_id in payment_tasks:
                del payment_tasks[user_id]
    
    except asyncio.CancelledError:
        logger.info(f"–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")

        if user_id in payment_tasks:
            del payment_tasks[user_id]

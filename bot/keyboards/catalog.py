from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.formatters import format_price
from typing import List, Optional, Any


def get_categories_keyboard(
    categories: List[Any], 
    is_main: bool = True, 
    current_page: int = 1, 
    total_pages: int = 1, 
    parent_id: Optional[int] = None
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        categories: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        is_main: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        parent_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π)
        
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    builder = InlineKeyboardBuilder()
    navigation_buttons = []
    
    for category in categories:
        if is_main:
            # –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            builder.button(
                text=category.name,
                callback_data=f"main_category_{category.id}"
            )
        else:
            # –î–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            builder.button(
                text=category.name,
                callback_data=f"category_{category.id}"
            )
    
    builder.adjust(1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
    if total_pages > 1:
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        if current_page > 1:
            if is_main:
                navigation_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"main_categories_{current_page - 1}"))
            else:
                navigation_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"subcategories_{parent_id}_{current_page - 1}"))
        else:
            # –ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞, –µ—Å–ª–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            navigation_buttons.append(InlineKeyboardButton(text=" ", callback_data="empty"))
        
        # –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        navigation_buttons.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="empty"))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (–µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        if current_page < total_pages:
            if is_main:
                navigation_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"main_categories_{current_page + 1}"))
            else:
                navigation_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"subcategories_{parent_id}_{current_page + 1}"))
        else:
            # –ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞, –µ—Å–ª–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            navigation_buttons.append(InlineKeyboardButton(text=" ", callback_data="empty"))
        
        builder.row(*navigation_buttons)

    if not is_main:
        builder.row(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="back_to_main_categories"
            )
        )
    else:
        builder.row(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="start"
            )
        )
    
    return builder.as_markup()


def get_products_keyboard(
    products: List[Any], 
    category_id: int, 
    current_page: int, 
    total_pages: int
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    builder = InlineKeyboardBuilder()
    navigation_buttons = []

    for product in products:
        builder.button(
            text=f"{product.name}",
            callback_data=f"product_{product.id}"
        )
    
    builder.adjust(1)

    if total_pages > 1:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        if current_page > 1:
            navigation_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"category_{category_id}_{current_page - 1}"))
        else:
            # –ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞, –µ—Å–ª–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            navigation_buttons.append(InlineKeyboardButton(text=" ", callback_data="empty"))

        # –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        navigation_buttons.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="empty"))

        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (–µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        if current_page < total_pages:
            navigation_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"category_{category_id}_{current_page + 1}"))
        else:
            # –ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞, –µ—Å–ª–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            navigation_buttons.append(InlineKeyboardButton(text=" ", callback_data="empty"))

        builder.row(*navigation_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"back_to_parent_category_{category_id}"
        )
    )
    
    return builder.as_markup()


def get_product_keyboard(product: Any, quantity: int = 1) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
    """
    builder = InlineKeyboardBuilder()

    builder.button(
        text="‚ûñ",
        callback_data=f"change_quantity_{product.id}_{max(1, quantity - 1)}"
    )
    
    builder.button(
        text=f"{quantity} —à—Ç.",
        callback_data="empty"
    )
    
    builder.button(
        text="‚ûï",
        callback_data=f"change_quantity_{product.id}_{quantity + 1}"
    )

    builder.button(
        text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
        callback_data=f"confirm_add_to_cart_{product.id}_{quantity}"
    )

    builder.button(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
        callback_data=f"category_{product.category_id}"
    )

    builder.adjust(3, 1, 1)
    
    return builder.as_markup()


def get_product_added_keyboard(product: Any) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """
    builder = InlineKeyboardBuilder()

    builder.button(
        text="üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É",
        callback_data="cart"
    )

    builder.button(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
        callback_data=f"category_{product.category_id}"
    )

    builder.adjust(1)
    
    return builder.as_markup()
